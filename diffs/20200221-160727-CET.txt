diff --git a/deugniets.py b/deugniets.py
index 1a90b5e..221e845 100644
--- a/deugniets.py
+++ b/deugniets.py
@@ -1,7 +1,7 @@
 #!/usr/bin/env python3
 '''
 ===========================================================================
- deugniets.py v2.73-20200220 Copyright 2019-2020 by cbuijs@chrisbuijs.com
+ deugniets.py v2.74-20200221 Copyright 2019-2020 by cbuijs@chrisbuijs.com
 ===========================================================================
 
  Based on: https://github.com/supriyo-biswas/adblock-dns-server
@@ -26,11 +26,13 @@
  - Bootstrap servers for getaddrinfo
  - Check/Investigate/Use Twisted names framework - Backburner
  - Unduplicate check_dom matches - Added cache
+ - Check purpose of 'smartdoms'
 
 Done:
 
  - NextDNS supported out of the box
  - GeoIP
+ - listed_cache redundant due to caching
 
 ===========================================================================
 '''
@@ -106,7 +108,7 @@ from cache import CachedObject, CacheInventory
 
 # Initialize caches
 cache = CacheInventory(maxsize=65535, housekeeping=60, name='DNS-Cache')
-listed_cache = CacheInventory(maxsize=16384, housekeeping=60, name='Label-Cache')
+#listed_cache = CacheInventory(maxsize=16384, housekeeping=60, name='Label-Cache')
 unfilter_cache = CacheInventory(maxsize=512, housekeeping=60, name='UnFilter')
 geo_cache = CacheInventory(maxsize=8192, housekeeping=60, name='GEO-Cache')
 
@@ -141,8 +143,6 @@ command_acl6['0::1/128'] = True
 private4 = pytricia.PyTricia(32, socket.AF_INET)
 private6 = pytricia.PyTricia(128, socket.AF_INET6)
 
-#check_cache = dict()
-
 # vars
 dummy = '#!#!DUMMY!#!#'
 
@@ -432,7 +432,7 @@ def read_list(filenames, listname, domlst, ip4lst, ip6lst, rxlst, unlst, unip4,
 
             #for entry in list(filter(None, filter(is_dom.search, cleanlines))):
             #    domlst[make_dom(entry)] = entry
-            domlst.update(dict.fromkeys(list(filter(None, filter(is_dom.search, cleanlines))), 'Domain'))
+            domlst.update(dict.fromkeys(list(map(make_dom, filter(None, filter(is_dom.search, cleanlines)))), 'Domain'))
 
             for entry in list(filter(None, filter(is_domword.search, cleanlines))):
                     try:
@@ -774,17 +774,16 @@ def is_blacklisted(value, valuetype, checkip):
     if config['filtering'] is False:
         return None
 
-    if checkip:
-        testvalue = str(value)
-    else:
-        testvalue = regex.split('\s+', str(value))[-1].lower()
+    testvalue = str(value)
+    if not checkip:
+        testvalue = regex.split('\s+', str(value))[-1].lower() # Get last value
 
     #logging.debug('{0}-BLACKLIST-CHECK: {1}'.format(valuetype, testvalue))
 
     count = 0
-    while count < config['retry_count'] and testvalue in beingchecked and (testvalue not in listed_cache):
+    while count < config['retry_count'] and testvalue in beingchecked: # and (testvalue not in listed_cache):
         count += 1
-        logging.debug('{0}-BLACKLIST-SLEEP: {1} (#{2})'.format(valuetype, testvalue, count))
+        #logging.debug('{0}-BLACKLIST-SLEEP: {1} (#{2})'.format(valuetype, testvalue, count))
         time.sleep(config['retry_wait'])
 
     if count >= config['retry_count']:
@@ -793,72 +792,37 @@ def is_blacklisted(value, valuetype, checkip):
 
     beingchecked.add(testvalue)
 
-    if testvalue in listed_cache:
-        result = listed_cache.get(testvalue)
-    else:
-        result = check_blacklisted(value, testvalue, valuetype, checkip)
-        listed_cache.add(obj=CachedObject(name=testvalue, obj=result, ttl=config['blacklist_cache_ttl']))
+    result = check_blacklisted(testvalue, valuetype, checkip)
+
+    #logging.debug('{0}-CHECK-RESULT: {1} = {2}'.format(valuetype, testvalue, result))
 
     beingchecked.discard(testvalue)
 
     return result
 
 
-def check_blacklisted(value, testvalue, valuetype, checkip):
-    '''Check value is white/black-listed and cache result'''
-    #testvalue = regex.split('\s+', str(value))[-1].lower()
-
-    #logging.debug('BLACKLIST: Evaluating \"{0}\"'.format(testvalue))
-
-    notip = True
-    if checkip:
-        notip = False
-
-    if notip and is_dom.search(testvalue) and check_dom(valuetype, testvalue, alias, 'ALIAS', False, False): # Whitelisted/ALIAS
-        return False
+def check_blacklisted(testvalue, valuetype, checkip):
+    '''Check value is white/black-listed'''
+    orgtestvalue = testvalue
 
-    if config['blockip4'] and ((notip and ip4arpa.search(testvalue)) or (check_ip and is_ip4.search(testvalue))):
+    if config['blockip4'] and ((checkip is False and ip4arpa.search(testvalue)) or (check_ip is True and is_ip4.search(testvalue))):
         if config['log_hits']:
             logging.warning('{0}-IPV4-HIT: {1}'.format(valuetype, testvalue))
         return True
-    elif config['blockip6'] and ((notip and ip6arpa.search(testvalue)) or (check_ip and is_ip6.search(testvalue))):
+    elif config['blockip6'] and ((checkip is False and ip6arpa.search(testvalue)) or (check_ip is True and is_ip6.search(testvalue))):
         if config['log_hits']:
              logging.warning('{0}-IPV6-HIT: {1}'.format(valuetype, testvalue))
         return True
 
-    if notip and config['parent_hit']:
-        match = check_dom(valuetype, testvalue, listed_cache, 'PARENT-LISTED', True, False)
-        if match:
-            result = listed_cache.get(match) 
-            if result != None:
-                if config['log_hits']:
-                    tag = 'NOTLISTED'
-                    if result is True:
-                        tag = 'BLACKLISTED'
-                    elif result is False:
-                        tag = 'WHITELISTED'
-
-                    logging.warning('PARENT-{0}-HIT: \"{1}\" -> \"{2}\"'.format(tag, testvalue, match))
-
-                return result
-
-    result = check_if_blacklisted(testvalue, valuetype, checkip)
-    return result
-
-
-def check_if_blacklisted(testvalue, valuetype, checkip):
-    '''Check value is white/black-listed'''
-    orgtestvalue = testvalue
-
     # Check against domain
     if checkip is False and is_dom.search(testvalue):
         #logging.debug('CHECK-{0}: \"{1}\" is a DOMAIN'.format(valuetype, testvalue))
         if check_dom(valuetype, testvalue, wl_dom, 'WHITELIST', False, False): # Whitelisted
-            if config['smartdoms'] and (check_dom(valuetype, testvalue, bl_dom, 'BLACKLIST', False, True) or check_rx(valuetype, testvalue, bl_rx, bl_big_rx, 'BLACKLIST')): # Blacklisted
-                return True
-
             return False
-    
+        #   if config['smartdoms'] and (check_dom(valuetype, testvalue, bl_dom, 'BLACKLIST', False, True) or check_rx(valuetype, testvalue, bl_rx, bl_big_rx, 'BLACKLIST')): # Blacklisted
+        #       return True
+
+        #   return False
 
         if check_rx(valuetype, orgtestvalue, wl_rx, wl_big_rx, 'WHITELIST'):
             return False
@@ -891,7 +855,7 @@ def check_if_blacklisted(testvalue, valuetype, checkip):
             ip = expand_ip(':'.join(filter(None, regex.split('(.{4,4})', ''.join(testvalue.strip('.').split('.')[0:32][::-1]))))) # IPv6
 
         if ip:
-            logging.debug('CHECK-{0}-ARPA-2-IP: {1} -> {2}'.format(valuetype, testvalue, ip))
+            #logging.debug('CHECK-{0}-ARPA-2-IP: {1} -> {2}'.format(valuetype, testvalue, ip))
             checkip = True
             testvalue = ip
 
@@ -988,8 +952,9 @@ def check_if_blacklisted(testvalue, valuetype, checkip):
 def check_rx(valuetype, testvalue, rxlst, rxbiglst, tag):
     '''Match value against regex'''
     if config['use_regex']:
+        #logging.debug('{0}-CHECK-RX: {1}'.format(valuetype, testvalue))
         if config['use_quick_regex']:
-            match = rxbiglst.search(testvalue)
+            match = rxbiglst.search(testvalue) or rxbiglst.search(testvalue.rstrip('.')) # Traling dot is optional when doing regex to make it easier
             if match:
                 if config['log_hits']:
                     logging.warning('{0}-{1}-QUICK-RX-HIT: \"{2}\" matches \"{3}\"'.format(valuetype, tag, testvalue, match.group()))
@@ -1008,27 +973,17 @@ def check_rx(valuetype, testvalue, rxlst, rxbiglst, tag):
 
 def check_dom(valuetype, testvalue, domlist, listname, onlyparent, smart):
     '''Match domain against list, works for subdomains too'''
-    #check_name = False
-    #if listname:
-    #    check_name = '{0}/{1}'.format(testvalue, listname)
-    #    if check_name in check_cache:
-    #        return check_cache.get(check_name, False)
-
+    #logging.debug('{0}-CHECK-DOM [{1}]: {2}'.format(valuetype, listname, testvalue))
     if testvalue in domlist:
         if config['log_hits'] and listname:
             logging.warning('{0}-DOM-HIT [{1}]: \"{2}\" -> \"{2}\"'.format(valuetype, listname, testvalue))
-    #    if check_name:
-    #        check_cache[check_name] = testvalue
         return testvalue
 
     fqdn = check_dom_walk(valuetype, testvalue, domlist, listname, onlyparent)
     if fqdn:
-    #    if check_name:
-    #        check_cache[check_name] = fqdn
         return fqdn
 
     if smart:
-        #valuetest = '{0}'.format('.'.join(testvalue.rstrip('.').split('.')[0:-1])) # Strip of last label to make sure we match against sub
         valuetest = testvalue.rstrip('.')
         while valuetest.count('.') > 1:
             valuetest = '.'.join(valuetest.split('.')[:-1])
@@ -1036,17 +991,13 @@ def check_dom(valuetype, testvalue, domlist, listname, onlyparent, smart):
             if fqdn and fqdn.count('.') > 1:
                 if config['log_hits'] and listname:
                     logging.warning('{0}-SMARTDOM-HIT [{1}]: \"{2}\" -> \"{3}\"'.format(valuetype, listname, testvalue, fqdn))
-    #            if check_name:
-    #                check_cache[check_name] = fqdn
                 return fqdn
 
-    #if check_name:
-    #    check_cache[check_name] = False
-
     return False
 
 
 def check_dom_walk(valuetype, testvalue, domlist, listname, onlyparent):
+    #logging.debug('{0}-CHECK-DOMWALK [{1}]: {2}'.format(valuetype, listname, testvalue))
     fqdn = ''
     for label in filter(None, testvalue.strip('.').split('.')[::-1]):
         fqdn = '{0}.{1}'.format(label, fqdn)
@@ -1078,16 +1029,17 @@ def check_dom_walk(valuetype, testvalue, domlist, listname, onlyparent):
 
 def check_ip(valuetype, testvalue, orgtestvalue, iplist, listname, rc):
     '''Check if IP is listed'''
+    #logging.debug('{0}-CHECK-IP [{1}]: {2}'.format(valuetype, listname, testvalue))
     if testvalue in iplist:
         if config['log_hits'] and listname:
             logging.warning('{0}-IP-HIT [{1}]: {2} -> {3}'.format(valuetype, listname, orgtestvalue, iplist.get_key(testvalue)))
 
-        if testvalue == orgtestvalue:
-            listed_cache.add(obj=CachedObject(name=testvalue, obj=rc, ttl=config['blacklist_cache_ttl']))
-        else:
-            if listname:
-                logging.debug('{0}-IP-HIT-ADD-ARPA [{1}]: {2} -> {3}'.format(valuetype, listname, testvalue, orgtestvalue))
-            listed_cache.add(obj=CachedObject(name=orgtestvalue, obj=rc, ttl=config['blacklist_cache_ttl']))
+        #if testvalue == orgtestvalue:
+        #    listed_cache.add(obj=CachedObject(name=testvalue, obj=rc, ttl=config['blacklist_cache_ttl']))
+        #else:
+        #    if listname:
+        #        logging.debug('{0}-IP-HIT-ADD-ARPA [{1}]: {2} -> {3}'.format(valuetype, listname, testvalue, orgtestvalue))
+        #    listed_cache.add(obj=CachedObject(name=orgtestvalue, obj=rc, ttl=config['blacklist_cache_ttl']))
 
         return rc
 
@@ -1096,6 +1048,7 @@ def check_ip(valuetype, testvalue, orgtestvalue, iplist, listname, rc):
 
 def check_geo(valuetype, testvalue, geolst, listname):
     if config['geodb']:
+        #logging.debug('{0}-CHECK-GEO [{1}]: {2}'.format(valuetype, listname, testvalue))
         giploc = geo(testvalue)
         if giploc:
             city, area, country, continent = tuple(giploc.split('/')[0:4])
@@ -1126,7 +1079,6 @@ def check_geo(valuetype, testvalue, geolst, listname):
 
 # !!! FIX - Better handling of quotas per dat for AbuseIPDB
 def check_badip(cip):
-
     if config['filtering'] is False:
         return False
 
@@ -1134,7 +1086,7 @@ def check_badip(cip):
         count = 0
         while count < config['retry_count'] and cip in beingchecked:
             count += 1
-            logging.debug('BADIP-SLEEP: {0} (#{1})'.format(cip, count))
+            #logging.debug('BADIP-SLEEP: {0} (#{1})'.format(cip, count))
             time.sleep(config['retry_wait'])
 
         if count >= config['retry_count'] and cip in beingchecked:
@@ -1155,7 +1107,7 @@ def check_badip(cip):
     
         if (cip in private) or (cip in wl_ip):
             #if config['log_hits']:
-                #logging.debug('ACL-WHITELIST-HIT: Client {0} -> {1}'.format(cip, wl_ip.get_key(cip)))
+                #logging.warning('ACL-WHITELIST-HIT: Client {0} -> {1}'.format(cip, wl_ip.get_key(cip)))
             beingchecked.discard(cip)
             return False
 
@@ -1433,25 +1385,25 @@ def dns_query(name, rdclass, rdtype, qid, cip, unfilter, fttl):
             elif command == 'FLUSH':
                 clear_caches()
 
-            elif (command in ('HITS', 'STATS')) and (subcommand in ('BLACKLISTED', 'NONE', 'OK', 'WHITELISTED')):
-                count = 0
-                for entry in sorted(queryhits, key=queryhits.get, reverse=True):
-                    testvalue = entry.split('/')[0]
-                    if testvalue and testvalue.endswith('.command.') is False and testvalue in listed_cache:
-                        blocked = listed_cache.get(testvalue)
-                        blockedinfo = "OK"
-                        if blocked is True:
-                            blockedinfo = "BLACKLISTED"
-                        elif blocked is False:
-                            blockedinfo = "WHITELISTED"
-
-                        if subcommand != 'NONE':
-                            if subcommand.lower() == blockedinfo.lower():
-                                count += 1
-                                logging.info('STATS-#{0}: {1} had {2} queries ({3})'.format(count, entry, queryhits.get(entry, 0), blockedinfo))
-                        else:
-                            count += 1
-                            logging.info('STATS-#{0}: {1} had {2} queries ({3})'.format(count, entry, queryhits.get(entry, 0), blockedinfo))
+            #elif (command in ('HITS', 'STATS')) and (subcommand in ('BLACKLISTED', 'NONE', 'OK', 'WHITELISTED')):
+            #    count = 0
+            #    for entry in sorted(queryhits, key=queryhits.get, reverse=True):
+            #        testvalue = entry.split('/')[0]
+            #        if testvalue and testvalue.endswith('.command.') is False and testvalue in listed_cache:
+            #            blocked = listed_cache.get(testvalue)
+            #            blockedinfo = "OK"
+            #            if blocked is True:
+            #                blockedinfo = "BLACKLISTED"
+            #            elif blocked is False:
+            #                blockedinfo = "WHITELISTED"
+
+            #            if subcommand != 'NONE':
+            #                if subcommand.lower() == blockedinfo.lower():
+            #                    count += 1
+            #                    logging.info('STATS-#{0}: {1} had {2} queries ({3})'.format(count, entry, queryhits.get(entry, 0), blockedinfo))
+            #            else:
+            #                count += 1
+            #                logging.info('STATS-#{0}: {1} had {2} queries ({3})'.format(count, entry, queryhits.get(entry, 0), blockedinfo))
 
             else:
                 logging.error('COMMAND-UNKNOWN: {0}'.format(command))
@@ -1471,8 +1423,8 @@ def dns_query(name, rdclass, rdtype, qid, cip, unfilter, fttl):
         parentcount += 1
         parentcachename = '.'.join(cachename.split('.')[parentcount:])
 
-        if config['log_caching']:
-            logging.debug('CACHE-CHECK [{0}]: {1} <- {2}'.format(qid, cachename, parentcachename))
+        #if config['log_caching']:
+        #    logging.debug('CACHE-CHECK [{0}]: {1} <- {2}'.format(qid, cachename, parentcachename))
 
         result = cache.get(parentcachename)
         if result is not None:
@@ -1480,15 +1432,8 @@ def dns_query(name, rdclass, rdtype, qid, cip, unfilter, fttl):
             expires = obj.timestamp + obj.ttl
             left = int(expires - time.time())
             if left > 0:
+                result = update_ttls(result, left)
                 if parentcachename == cachename:
-                    # Update TTLs
-                    for rrset in result[1]:
-                        rrset.ttl = left
-                    for rrset in result[2]:
-                        rrset.ttl = left
-                    for rrset in result[3]:
-                        rrset.ttl = left
-
                     if config['log_caching'] and config['log_hits'] and is_ip.search(cip):
                         logging.info('CACHE-HIT [{0}]: {1} = {2} (TTL-LEFT:{3}) - {4}'.format(qid, cachename, dns.rcode.to_text(result[0]), left, result[4]))
                         log_helper(qname, qrdtype, result, 'RESPONSE-FROM-CACHE', qid)
@@ -1497,11 +1442,24 @@ def dns_query(name, rdclass, rdtype, qid, cip, unfilter, fttl):
                 elif result[0] != 0: # Parent cache not NOERROR
                     newresult = (result[0], [], result[2], [], result[4])
                     if config['log_caching'] and config['log_hits'] and is_ip.search(cip):
-                        logging.info('PARENT-CACHE-HIT [{0}]: {1} = {2} = {3} (TTL-LEFT:{3}) - {4}'.format(qid, cachename, parentcachename, dns.rcode.to_text(result[0]), left, result[4]))
+                        logging.info('PARENT-CACHE-HIT [{0}]: {1} = {2} = {3} (TTL-LEFT:{4}) - {5}'.format(qid, cachename, parentcachename, dns.rcode.to_text(result[0]), left, result[4]))
                         log_helper(qname, qrdtype, newresult, 'RESPONSE-FROM-PARENT-CACHE', qid)
                     cache.add(obj=CachedObject(name=cachename, obj=newresult, ttl=left))
                     return (newresult[0], [], newresult[2], [])
 
+                elif result[0] == 0 and config['redirect_ip'] and len(result[1]) > 0: # parent cache redirect ip
+                    for rrset in result[1]:
+                        if rrset.rdtype in (1, 28): # Only A and AAAA
+                            for rr in rrset:   
+                                if hasattr(rr, 'address'):
+                                    target = str(rr.address)
+                                    if target in config['redirect_ip']:
+                                        if config['log_caching'] and config['log_hits'] and is_ip.search(cip):
+                                            logging.info('PARENT-CACHE-HIT [{0}]: {1} = {2} = {3} (TTL-LEFT:{4}) - {5}'.format(qid, cachename, parentcachename, target, left, result[4]))
+                                            log_helper(qname, qrdtype, result, 'RESPONSE-FROM-PARENT-CACHE', qid)
+                                        cache.add(obj=CachedObject(name=cachename, obj=result, ttl=left))
+                                        return (result[0], result[1], result[2], result[3])
+
         if config['parent_cache_hit'] is not True:
             break
 
@@ -1548,7 +1506,7 @@ def dns_query(name, rdclass, rdtype, qid, cip, unfilter, fttl):
                     count = 0
                     while count < config['retry_count'] and (qname in beingspoofed or check_dom('NAME', qname, beingspoofed, 'SPOOFER-CHECKER', False, False)):
                         count += 1
-                        logging.debug('SPOOF-SLEEP: {0} (#{1})'.format(qname, count))
+                        #logging.debug('SPOOF-SLEEP: {0} (#{1})'.format(qname, count))
                         time.sleep(config['retry_wait'])
 
                     if count >= config['retry_count']:
@@ -1620,7 +1578,7 @@ def dns_query(name, rdclass, rdtype, qid, cip, unfilter, fttl):
                         beingspoofed.discard(qname)
 
                 else:
-                    logging.debug('NO-SPOOF [{0}]: Same or Sub-Domain for \"{1}\" -> \"{2}\"'.format(qid, qname, spoof))
+                    logging.warning('NO-SPOOF [{0}]: Same or Sub-Domain for \"{1}\" -> \"{2}\"'.format(qid, qname, spoof))
 
 
     addrs = False
@@ -1786,10 +1744,10 @@ def dns_query(name, rdclass, rdtype, qid, cip, unfilter, fttl):
                 else:
                     returnstatus = 'BLACKLISTED'
                     rv = (config['blacklist_rcode'], [], [], [])
-                    if blacklistname and (listed_cache.get(blacklistname) in (None, False)):
-                        if config['log_caching']:
-                            logging.debug('EXTRA-CACHE [{0}]: {1}'.format(qid, blacklistname))
-                        listed_cache.add(obj=CachedObject(name=blacklistname, obj=True, ttl=config['blacklist_cache_ttl']))
+                    #if blacklistname and (listed_cache.get(blacklistname) in (None, False)):
+                    #    if config['log_caching']:
+                    #        logging.debug('EXTRA-CACHE [{0}]: {1}'.format(qid, blacklistname))
+                    #    listed_cache.add(obj=CachedObject(name=blacklistname, obj=True, ttl=config['blacklist_cache_ttl']))
 
             else: # No answer
                 rv = (response.rcode(), [], response.authority, [])
@@ -1820,7 +1778,7 @@ def dns_query(name, rdclass, rdtype, qid, cip, unfilter, fttl):
                 ttl = rv[1][-1].ttl
             elif countrr(rv[2]) > 0: # Get TTL from auth section
                 ttl = rv[2][-1].ttl
-                logging.debug('AUTH-TTL [{0}]: {1} = {2}'.format(qid, cachename, ttl))
+                #logging.debug('AUTH-TTL [{0}]: {1} = {2}'.format(qid, cachename, ttl))
 
             if not ttl:
                 if blacklistname:
@@ -1879,12 +1837,7 @@ def dns_query(name, rdclass, rdtype, qid, cip, unfilter, fttl):
                 rv = (rcode, [], [soa], [])
 
             else: # All TTLs same
-                for rrset in rv[1]:
-                    rrset.ttl = ttl
-                for rrset in rv[2]:
-                    rrset.ttl = ttl
-                for rrset in rv[3]:
-                    rrset.ttl = ttl
+                rv = update_ttls(rv, ttl)
 
             cache.add(obj=CachedObject(name=cachename, obj=rv + (returnstatus,), ttl=ttl))
 
@@ -1894,6 +1847,17 @@ def dns_query(name, rdclass, rdtype, qid, cip, unfilter, fttl):
     return rv
 
 
+def update_ttls(result, left):
+    for rrset in result[1]:
+        rrset.ttl = left
+    for rrset in result[2]:
+        rrset.ttl = left
+    for rrset in result[3]:
+        rrset.ttl = left
+
+    return result
+
+
 # !!!! WORK IN PROGRESS
 # Code based and adapted on: https://www.bortzmeyer.org/hackathon-ietf-101.html
 def dox_request(qid, qname, rdtype, cachename, urls, rfc8484, cip):
@@ -2052,7 +2016,7 @@ def dox_request(qid, qname, rdtype, cachename, urls, rfc8484, cip):
 
 def clear_caches():
     cache.clear()
-    listed_cache.clear()
+    #listed_cache.clear()
     unfilter_cache.clear()
     queryhits.clear()
     gc.collect() # Collect garbage
@@ -2258,7 +2222,7 @@ def handle_query(raw_data, client_ip):
     count = 0
     while count < config['retry_count'] and bname in beingchecked:
         count += 1
-        logging.debug('QUERY-SLEEP [{0}]: {1} ({2}) from {3} (#{4})'.format(query.id, queryname, bname, cip, count))
+        #logging.debug('QUERY-SLEEP [{0}]: {1} ({2}) from {3} (#{4})'.format(query.id, queryname, bname, cip, count))
         time.sleep(config['retry_wait'])
 
     if count >= config['retry_count']:
@@ -2343,7 +2307,7 @@ class UDPHandler(socketserver.BaseRequestHandler):
         try:
             raw_response = response.to_wire()
         except BaseException as err:
-            logging.debug('RESPONSE-ERROR-DEBUG: {0}'.format(response))
+            #logging.debug('RESPONSE-ERROR-DEBUG: {0}'.format(response))
             logging.error('SOCKET-RESPONSE-TO-WIRE ERROR: {0}'.format(err))
             return
 
