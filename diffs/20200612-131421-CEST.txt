diff --git a/deugniets.py b/deugniets.py
index 151b8a8..1084da7 100644
--- a/deugniets.py
+++ b/deugniets.py
@@ -1,7 +1,7 @@
 #!/usr/bin/env python3
 '''
 ===========================================================================
- deugniets.py v3.21-20200612 Copyright 2019-2020 by cbuijs@chrisbuijs.com
+ deugniets.py v3.22-20200612 Copyright 2019-2020 by cbuijs@chrisbuijs.com
 ===========================================================================
 
  Based on: https://github.com/supriyo-biswas/adblock-dns-server
@@ -2465,8 +2465,7 @@ def dox_request(qid, qname, rdtype, cachename, urls, rfc8484, cip):
         message.find_rrset(message.additional, dns.name.root, 65535, dns.rdatatype.OPT, create=True, force_unique=True)
         #message.find_rrset(message.additional, dns.name.root, 4096, dns.rdatatype.OPT, create=True, force_unique=True)
 
-    #if config['use_ecs_ip'] and icip:
-    if icip and (config['override_ecs_ip4'] or config['override_ecs_ip6']):
+    if config['add_ecs_ip'] and icip:
         ccip = cip
         bits = 0
         if ip6 or config['force6']:
@@ -2484,8 +2483,11 @@ def dox_request(qid, qname, rdtype, cachename, urls, rfc8484, cip):
 
         ocip = IP(ccip).make_net(str(bits)).strNormal(0) # Convert to network with no mask
 
-        if config['log_ecs'] and bits not in (32, 128):
-            logging.info('EDNS-CLIENT-SUBNET-PRIVACY [{0}]: {1} -> {2}/{3}'.format(qid, ccip, ocip, bits))
+        if config['log_ecs']:
+            if bits in (32, 128):
+                logging.info('EDNS-CLIENT-SUBNET-ADD [{0}]: {1}/{2}'.format(qid, ocip, bits))
+            else:
+                logging.info('EDNS-CLIENT-SUBNET-PRIVACY [{0}]: {1} -> {2}/{3}'.format(qid, ccip, ocip, bits))
 
         cso = clientsubnetoption.ClientSubnetOption(ocip, bits)
         message.use_edns(edns=True, ednsflags=0, payload=1220, request_payload=None, options=[cso])
@@ -2828,38 +2830,35 @@ def handle_query(raw_data, client_ip):
         logging.error('REQUEST-ERROR: Query from {0} - {1}'.format(client_ip, e))
         return
 
-    client_ip = str(client_ip)
+    cip = addzero(str(client_ip))
+    name = str(query.question[0].name).lower()
+    rdclass = query.question[0].rdclass
+    rdclasst = dns.rdataclass.to_text(rdclass)
+    rdtype = query.question[0].rdtype
+    rdtypet = dns.rdatatype.to_text(rdtype)
+    queryname = '{0}/{1}/{2}'.format(name, rdclasst, rdtypet)
+    bname = '{0}/{1}/*'.format(name, rdclasst)
+    fromtrie = False
 
     # Need IPy.IP for octal conversion to real IP
     #if hasattr(query, 'options'):
     if config['use_ecs_ip'] and hasattr(query, 'options'):
         for opt in query.options:
-            if isinstance(opt, ClientSubnetOption):
+            if isinstance(opt, clientsubnetoption.ClientSubnetOption):
                 if hasattr(opt, 'ip') and hasattr(opt, 'mask'):
                     ipaddr = IP(opt.ip).strNormal(0)
                     if opt.mask in (None, 0, 32, 128):
                         if config['log_ecs'] and config['log_verbose']:
-                            logging.info('EDNS-CLIENT-SUBNET [{0}]: Client {1} -> {2} ({3})'.format(query.id, client_ip, ipaddr, geo(ipaddr)))
-                        client_ip = str(ipaddr)
+                            logging.info('EDNS-CLIENT-SUBNET [{0}]: Client {1} -> {2} ({3}) for {4}/{5}'.format(query.id, client_ip, ipaddr, geo(ipaddr), name, rdtypet))
+                        cip = str(ipaddr)
 
                     elif config['log_ecs'] and config['log_verbose']:
-                        logging.info('EDNS-CLIENT-SUBNET [{0}]: Client {1} provides subnet {2}/{3}'.format(query.id, client_ip, ipaddr, opt.mask))
+                        logging.info('EDNS-CLIENT-SUBNET [{0}]: Client {1} provides subnet {2}/{3} for {4}/{5}'.format(query.id, client_ip, ipaddr, opt.mask, name, rdtypet))
 
                     break
 
     #logging.debug('GEO-IP: {0} - {1}'.format(client_ip, geo(client_ip)))
 
-    name = str(query.question[0].name).lower()
-    cip = addzero(str(client_ip))
-    rdclass = query.question[0].rdclass
-    rdclasst = dns.rdataclass.to_text(rdclass)
-    rdtype = query.question[0].rdtype
-    rdtypet = dns.rdatatype.to_text(rdtype)
-    queryname = '{0}/{1}/{2}'.format(name, rdclasst, rdtypet)
-    bname = '{0}/{1}/*'.format(name, rdclasst)
-
-    fromtrie = False
-
     if check_badip(cip):
         logging.warning('DROP-CLIENT: {0} requesting {1}/{2}/{3} from {4}'.format(compress_ip(cip), name, rdtypet, rdclasst, geo(cip)))
         return None # DROP
@@ -3371,6 +3370,7 @@ if __name__ == '__main__':
 
     # Use EDNS CLIENT SUBNET (ECS) IP as client IP (only when /32 or /128)
     config['use_ecs_ip'] = True
+    config['add_ecs_ip'] = True
     config['ecs_privacy4'] = 24 # ECS Privacy for IPv4 - Only show the /24
     config['ecs_privacy6'] = 48 # ECS Privacy for IPv6 - Only use the /48
     config['override_ecs_ip4'] = False
